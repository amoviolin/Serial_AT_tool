// RfCardDlg.cpp : implementation file
//

#include "stdafx.h"
#include "RfCard.h"
#include "RfCardDlg.h"
#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

/////////////////////////////////////////////////////////////////////////////
// CAboutDlg dialog used for App About

class CAboutDlg : public CDialog
{
public:
	CAboutDlg();

// Dialog Data
	//{{AFX_DATA(CAboutDlg)
	enum { IDD = IDD_ABOUTBOX };
	//}}AFX_DATA

	// ClassWizard generated virtual function overrides
	//{{AFX_VIRTUAL(CAboutDlg)
	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support
	//}}AFX_VIRTUAL

// Implementation
protected:
	//{{AFX_MSG(CAboutDlg)
	//}}AFX_MSG
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialog(CAboutDlg::IDD)
{
	//{{AFX_DATA_INIT(CAboutDlg)
	//}}AFX_DATA_INIT
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CAboutDlg)
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialog)
	//{{AFX_MSG_MAP(CAboutDlg)
		// No message handlers
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CRfCardDlg dialog

CRfCardDlg::CRfCardDlg(CWnd* pParent /*=NULL*/)
	: CDialog(CRfCardDlg::IDD, pParent)
{
	//{{AFX_DATA_INIT(CRfCardDlg)
	m_lstAllCmdValue = _T("");
	m_write_hex_begin = _T("");
	m_Key_Value = _T("");
	m_Inc_Value = _T("");
	m_Dec_Value = _T("");
	m_Trans_Value = _T("");
	m_Sector_Value = _T("0");
	m_Blk_Value = _T("0");
	//}}AFX_DATA_INIT
	// Note that LoadIcon does not require a subsequent DestroyIcon in Win32
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CRfCardDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CRfCardDlg)
	DDX_Control(pDX, IDC_SPIN_BLK, m_Spin_Blk);
	DDX_Control(pDX, IDC_SPIN_SECTOR, m_Spin_Sector);
	DDX_Control(pDX, IDC_LIST_FROM_MCU, m_lstFromMcu);
	DDX_Control(pDX, IDC_LIST_CMD, m_lstCmd);
	DDX_Control(pDX, IDC_LIST_ALL_CMD, m_lstAllCmd);
	DDX_LBString(pDX, IDC_LIST_ALL_CMD, m_lstAllCmdValue);
	DDX_Text(pDX, IDC_WRITE_HEX_BEGIN, m_write_hex_begin);
	DDX_Text(pDX, IDC_KEY_VALUE, m_Key_Value);
	DDX_Text(pDX, IDC_INC_VALUE, m_Inc_Value);
	DDX_Text(pDX, IDC_DEC_VALUE, m_Dec_Value);
	DDX_Text(pDX, IDC_TRANS_VALUE, m_Trans_Value);
	DDX_Text(pDX, IDC_SECTOR, m_Sector_Value);
	DDX_Text(pDX, IDC_BLK, m_Blk_Value);
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CRfCardDlg, CDialog)
	//{{AFX_MSG_MAP(CRfCardDlg)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_ADD, OnAdd)
	ON_BN_CLICKED(IDC_OPEN, OnOpen)
	ON_BN_CLICKED(IDC_SAVE, OnSave)
	ON_BN_CLICKED(IDC_BTN_DELETE_ALL, OnBtnDeleteAll)
	ON_BN_CLICKED(IDC_BTN_DELETE, OnBtnDelete)
	ON_BN_CLICKED(IDC_RUN, OnRun)
	ON_BN_CLICKED(IDC_STEP, OnStep)
	ON_BN_CLICKED(IDC_LINK, OnLink)
//	ON_EN_CHANGE(IDC_WRITE_HEX_BEGIN, OnChangeWriteHexBegin)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CRfCardDlg message handlers

BOOL CRfCardDlg::OnInitDialog()
{
	CDialog::OnInitDialog();

	// Add "About..." menu item to system menu.

	// IDM_ABOUTBOX must be in the system command range.
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		CString strAboutMenu;
		strAboutMenu.LoadString(IDS_ABOUTBOX);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// Set the icon for this dialog.  The framework does this automatically
	//  when the application's main window is not a dialog
	SetIcon(m_hIcon, TRUE);			// Set big icon
	SetIcon(m_hIcon, FALSE);		// Set small icon
	
	// TODO: Add extra initialization here
	m_lstAllCmd.AddString("Reset");
	m_lstAllCmd.AddString("Halt");
    m_lstAllCmd.AddString("Request0");
	m_lstAllCmd.AddString("Request1");
	m_lstAllCmd.AddString("AntiColl");
    m_lstAllCmd.AddString("Select");
	m_lstAllCmd.AddString("Authen");
    m_lstAllCmd.AddString("Read");
	m_lstAllCmd.AddString("Write");
    //m_lstAllCmd.AddString("InitiVal");
	m_lstAllCmd.AddString("TestMode");
    m_lstAllCmd.AddString("Inc");
	m_lstAllCmd.AddString("Dec");
    m_lstAllCmd.AddString("EraseAll");
	m_lstAllCmd.AddString("TransTo");
    m_lstAllCmd.AddString("LoadKey");
    m_lstAllCmd.AddString("Write11");
	m_lstAllCmd.AddString("Write55");
    m_lstAllCmd.AddString("WriteAA");
	m_lstAllCmd.AddString("WriteOTP");
    m_lstAllCmd.AddString("Active");
    m_Spin_Sector.SetRange(0, 16);
    m_Spin_Blk.SetRange(0, 3);
    m_Spin_Sector.SetPos(0);
    m_Spin_Blk.SetPos(0);

	return TRUE;  // return TRUE  unless you set the focus to a control
}

void CRfCardDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialog::OnSysCommand(nID, lParam);
	}
}

// If you add a minimize button to your dialog, you will need the code below
//  to draw the icon.  For MFC applications using the document/view model,
//  this is automatically done for you by the framework.

void CRfCardDlg::OnPaint() 
{
	if (IsIconic())
	{
		CPaintDC dc(this); // device context for painting

		SendMessage(WM_ICONERASEBKGND, (WPARAM) dc.GetSafeHdc(), 0);

		// Center icon in client rectangle
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// Draw the icon
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialog::OnPaint();
	}
}

// The system calls this to obtain the cursor to display while the user drags
//  the minimized window.
HCURSOR CRfCardDlg::OnQueryDragIcon()
{
	return (HCURSOR) m_hIcon;
}

void CRfCardDlg::OnAdd() 
{
	this->UpdateData(true);

	// TODO: Add your control notification handler code here
	if (m_lstAllCmdValue != (""))//AllCmdValue selection
	{
     	CString strTemp = m_lstAllCmdValue+" ";
		unsigned short CmdValue;
		CmdValue = CmdConvert(m_lstAllCmdValue);
		switch(CmdValue){
		case   0x0a0:{//write
			if(m_write_hex_begin.GetLength()>=1&&m_write_hex_begin.GetLength()<=32)
               strTemp += m_write_hex_begin;
			else{
				m_lstFromMcu.AddString("Please input :16Bytes,hex format");
				return;}
			break;
					 }
					 
		case   0x47:{//write
			if(m_mode>=1&&m_mode<=2)
               strTemp += m_mode;
			else{
				m_lstFromMcu.AddString("Please input :2Bytes,hex format");
				return;}
			break;
					 }
		case   0x0c1:{//inc
            if(m_Inc_Value.GetLength()==8)
               strTemp += m_Inc_Value;
			else{
				m_lstFromMcu.AddString("Please input:4Bytes,hex format");
				return;}
			break; 
					 }
		case   0x0c0:{//dec
			if(m_Dec_Value.GetLength()==8)
               strTemp += m_Dec_Value;
			else{
				m_lstFromMcu.AddString("Please input:4Bytes,hex format");
				return;}
			break;
					 }
		case   0x0b0:{//trasnfer to 
            if(m_Trans_Value.GetLength()==8)
               strTemp += m_Trans_Value;
			else{
				m_lstFromMcu.AddString("Please input :4Bytes,hex format");
				return;}
			break; 	
					 }
        case   0x011:{//load key 
            if(m_Key_Value.GetLength()==12)
               strTemp += m_Key_Value;
			else{
				m_lstFromMcu.AddString("Please input:6Bytes,hex format");
				return;}
			break; 	
					 }
		default:
			break;
				 }
		
		if (m_lstCmd.GetCurSel() == LB_ERR)//no selection
            m_lstCmd.InsertString(m_lstCmd.GetCount(),strTemp);//just add string at end of string list
	
		else
            m_lstCmd.InsertString(m_lstCmd.GetCurSel()+1,strTemp);
			//TRACE("N=%d\n",m_lstCmd.GetCurSel());
		//	m_lstCmd.InsertString(m_lstCmd.GetCurSel()+1,m_lstAllCmdValue);
	}
	//m_listAllCmdValue
	
}

void CRfCardDlg::OnOpen() 
{
	// TODO: Add your control notification handler code here
	static char BASED_CODE szFilter[] = "Text Files (*.txt) |*.txt|";
	CFileDialog cfgOpen(TRUE, NULL, NULL,  OFN_HIDEREADONLY | OFN_FILEMUSTEXIST , (LPCTSTR)szFilter, NULL);

	if (cfgOpen.DoModal() != IDOK) return;
//	if (cfgOpen.DoModal())
	else
	{
		CString fileName = cfgOpen.GetFileName();
		if (fileName != "")
		{
			m_lstCmd.ResetContent();
			
			HANDLE hFile = CreateFile(fileName.GetBuffer(fileName.GetLength()),
				GENERIC_READ,FILE_SHARE_READ,NULL,OPEN_EXISTING,
				FILE_ATTRIBUTE_NORMAL,NULL);
			bool bResult = false;
			CString strContent;
			if (hFile != NULL)
			{
				OVERLAPPED ov;
				memset(&ov,0,sizeof(ov));
				for ( ; ; )
				{
					DWORD dwRead;
					char c;
					if (ReadFile(hFile,&c,1,&dwRead,&ov) != 0)
					{
						//гаЪ§Он
						if (dwRead > 0)	
						{
							if ((c != '\n') && (c != '\r'))
							{
								strContent += c;
							}
							else
							{
								if (strContent.GetLength() != 0)
								{
									m_lstCmd.AddString(strContent);
									strContent.Empty();
								}
							}
						}
					}
					else		//read error
					{
						if (GetLastError() == ERROR_HANDLE_EOF)	
						{
							if (strContent.GetLength() != 0)
							{
								m_lstCmd.AddString(strContent);
								strContent.Empty();
							}
							bResult = true;			
						}
						break;
					}
					ov.Offset += 1;
				}// end for read file
				if (!bResult)
				{
					MessageBox("Read File Error","Error",MB_OK);
				}
				CloseHandle(hFile);
			}
			fileName.ReleaseBuffer();
		}
	}
}

static bool MyWriteFile(HANDLE hFile, OVERLAPPED& r_ov, CString& r_strContent)
{
	DWORD dwCurWrite = 0;
	DWORD dwWrited;
	LPTSTR lpStr = r_strContent.GetBuffer(r_strContent.GetLength());
	for ( ; dwCurWrite < (DWORD)r_strContent.GetLength(); )
	{
		if (WriteFile(hFile, lpStr + dwCurWrite, r_strContent.GetLength() - dwCurWrite,
			&dwWrited, &r_ov) != 0)
		{
			dwCurWrite += dwWrited;
			r_ov.Offset += dwWrited;
		}
		else
		{
			return false;
		}
	}
	return true;
	
}

void CRfCardDlg::OnSave() 
{
	// TODO: Add your control notification handler code here
	// TODO: Add your control notification handler code here
	//CFileDialog cfgOpen(false);
	//if (cfgOpen.DoModal())
	static char BASED_CODE szFilter[] = "Text Files (*.txt) |*.txt|";
	CFileDialog cfgOpen(false, NULL, NULL,  OFN_HIDEREADONLY | OFN_FILEMUSTEXIST , (LPCTSTR)szFilter, NULL);

	if (cfgOpen.DoModal() != IDOK) 
		return;
	else
	{
		CString fileName = cfgOpen.GetFileName();
		if (fileName != "")
		{
			HANDLE hFile = CreateFile(fileName.GetBuffer(fileName.GetLength()),
				GENERIC_WRITE,FILE_SHARE_WRITE,NULL,CREATE_ALWAYS,
				FILE_ATTRIBUTE_NORMAL,NULL);
			bool bResult = TRUE;
			if (hFile != NULL)
			{
				OVERLAPPED ov;
				memset(&ov,0,sizeof(ov));
				for (int i=0 ; i < m_lstCmd.GetCount(); i++)
				{
					CString strContent;
					m_lstCmd.GetText(i,strContent);
					strContent += '\r';
					strContent += '\n';
					if ( !MyWriteFile(hFile,ov,strContent))
					{
						bResult = false;
						break;		
					}
				}
				CloseHandle(hFile);
			}
			if (!bResult)
			{
				MessageBox("Write File Error","Error",MB_OK);
			}
			fileName.ReleaseBuffer();
			
		}
	}
}

void CRfCardDlg::OnBtnDeleteAll() 
{
	// TODO: Add your control notification handler code here
	m_lstCmd.ResetContent();
}

void CRfCardDlg::OnBtnDelete() 
{
	// TODO: Add your control notification handler code here
	if (m_lstAllCmd.GetCurSel() != LB_ERR)	
	{
		m_lstCmd.DeleteString(m_lstCmd.GetCurSel());
	}	
}

void CRfCardDlg::OnRun() 
{
	// TODO: Add your control notification handler code here
	for (int i=0 ; i < m_lstCmd.GetCount(); i++)
	{
		CString strContent;
		m_lstCmd.GetText(i,strContent);

	}	
}


void CRfCardDlg::OnStep() 
{
	// TODO: Add your control notification handler code here
	if (m_lstCmd.GetCurSel() != LB_ERR){//must have selection
		char  CommandStr[100],RespBuffer[100],tt[5];
		int Result;
	    unsigned char CmdDat[100],CmdLen,RecvBuff[100],i;
        TRACE("num=%d\n",m_lstCmd.GetCurSel());
	    m_lstCmd.GetText(m_lstCmd.GetCurSel(),CommandStr);
	    TRACE("ss=%s\n",CommandStr);
	    CmdLen = CmdTranslation(CommandStr,CmdDat);
		TRACE("len=%x\n",CmdLen);
        for(i=0;i<CmdLen;i++)
		TRACE("Cmd1=%x\n",CmdDat[i]);
		
		if(CmdLen = !NULL){//must be a correct command

			Result = CmdHandler(CmdDat,RecvBuff);//command handle
            
			if (Result < 0){//some error
				strcpy(RespBuffer,"Command Error");
		        m_lstFromMcu.AddString(RespBuffer);
				
			}
			else{
				strcpy(RespBuffer,"Resp:"); 
				for(i=0;i<(RecvBuff[2]+3);i++){//output fromat
					sprintf(tt,"%02x",RecvBuff[i]);
					strcat(RespBuffer,tt);
					strcat(RespBuffer," ");
					}
				m_lstFromMcu.AddString(RespBuffer);
			}
		}
	}
}
//COMM port link
HANDLE  CommPort = NULL;
void CRfCardDlg::OnLink() 
{
	// TODO: Add your control notification handler code here
	
	char RespBuffer[256];
	BOOL bOpened=FALSE,bEndFile=FALSE;
    
    if (CommPort == NULL)
         bOpened = OpenComm(1,9600);

	if (bOpened ==false) {
		strcpy(RespBuffer,"Error:Can't Open COM Port ");
		m_lstFromMcu.AddString(RespBuffer);
		return;
	}
	else
	{
        strcpy(RespBuffer,"Opened COM1 Port successfully ");
		m_lstFromMcu.AddString(RespBuffer);
	}

}
//send and receive
short protocol(HANDLE icdev,int len, unsigned char *send_cmd, unsigned char *receive_data)
{
    unsigned char i,TempBuffer[100];
	BOOL bResult;
	for(i=0;i<len;i++)
		TempBuffer[i] = send_cmd[i];
	for(i=0;i<4;i++)
		TRACE("dd=%x",send_cmd[i]);
	bResult=WriteCommPort(TempBuffer,len);
	if(!bResult)
		return -1;
	else
	{
		bResult = ReadCommPort(receive_data, 3);
		
		if(!bResult)
	         return -2;
		else{
			bResult = ReadCommPort(receive_data+3,receive_data[2]);
           	if(!bResult)
				return -2;
			else 
				return 0;
		}
	}
}



BOOL ReadCommPort( unsigned char *buffer, unsigned int length)
{
	DWORD   n_received;
	if(!ReadFile(CommPort, buffer, length, &n_received, NULL)||n_received!=length) 
	   	return FALSE;
	return TRUE;
}
/*-------------------------------------------------------------------------
 * Transmit block of data
 *-------------------------------------------------------------------------*/
BOOL WriteCommPort(unsigned char *buffer, unsigned char length)
{
	DWORD dwBytesWritten;
		
	if (!WriteFile(CommPort, buffer, length, &dwBytesWritten, NULL) || (dwBytesWritten != length)) {
		return FALSE;
	}
	return TRUE;   
   
}
BOOL OpenComm(int CommNum,unsigned long BaudRate)
{  
	char *PortName;
    char *com[]={" ", "COM1", "COM2"};
    BOOL bOpenResult = TRUE;
	PortName = com[CommNum];
	COMMTIMEOUTS  CommTimeOuts;
    DCB				dcb ;
    printf("Opening com port \"%s\" at %ld baudrate\n",PortName,BaudRate);
    
	switch(BaudRate)
    {
        case 1200   :   BaudRate = CBR_1200     ;    break; 
        case 2400   :   BaudRate = CBR_2400     ;    break;            
        case 4800   :   BaudRate = CBR_4800     ;    break;
        case 9600   :   BaudRate = CBR_9600     ;    break;
        case 14400  :   BaudRate = CBR_14400    ;    break;
        case 19200  :   BaudRate = CBR_19200    ;    break;
        case 38400  :   BaudRate = CBR_38400    ;    break;
        case 57600  :   BaudRate = CBR_57600    ;    break;
        case 115200 :   BaudRate = CBR_115200   ;    break;
        default     :   BaudRate = CBR_57600     ; 
                        printf(" Baud rate not supported!!\n Opening com port at %ld baudrate\n",BaudRate);
                        break;
    }
	CommPort = CreateFile(PortName, GENERIC_READ | GENERIC_WRITE,
		0,                    
		NULL,
		OPEN_EXISTING,
		FILE_ATTRIBUTE_NORMAL, 
	    NULL);
	
	if (INVALID_HANDLE_VALUE == CommPort){
		printf(("Open %s... failed\n", PortName));
	    return FALSE;	
	}
     // Set the size of the input and output buffer.
	if (!SetupComm( CommPort, 4096,4096  )) {
		printf("SetupComm failed\n");
		return FALSE;
	}

	// purge any information in the buffer
	if (!PurgeComm( CommPort, PURGE_TXABORT | PURGE_RXABORT | PURGE_TXCLEAR | PURGE_RXCLEAR)) {
		printf(" PurgeComm failed\n");
		return FALSE;
	}

	// set the time-out parameters for all read and write operations

	CommTimeOuts.ReadIntervalTimeout = 20 ;
	CommTimeOuts.ReadTotalTimeoutMultiplier =0 ;
	CommTimeOuts.ReadTotalTimeoutConstant =0 ;
	CommTimeOuts.WriteTotalTimeoutMultiplier = 0 ;
	CommTimeOuts.WriteTotalTimeoutConstant = 5000 ;	

	if (!SetCommTimeouts( CommPort, &CommTimeOuts )) {
		printf("SetCommTimeouts failed\n");
		return FALSE;
	}
	
	dcb.DCBlength = sizeof( DCB ) ;

	if (!GetCommState(CommPort, &dcb)) {
		printf(" GetCommState failed\n");
		return FALSE;
	}

	dcb.BaudRate = BaudRate;
	dcb.Parity = FALSE ;
	dcb.fBinary = TRUE ;
	dcb.Parity = NOPARITY ;
	dcb.ByteSize = 8 ;
	dcb.StopBits = ONESTOPBIT ;
// Flow Control Settings
	dcb.fRtsControl = RTS_CONTROL_DISABLE;//RTS_CONTROL_HANDSHAKE;
	dcb.fOutxCtsFlow = FALSE;
	dcb.fDtrControl = DTR_CONTROL_DISABLE;//DTR_CONTROL_HANDSHAKE;
	dcb.fOutxDsrFlow = FALSE;
	dcb.fAbortOnError = FALSE;

	if (!SetCommState(CommPort, &dcb)) {
		printf(" SetCommState failed\n");
		return FALSE;
	}
	

	return TRUE;
}
//  conver command string to command int code
unsigned short  CmdConvert(CString CmdString)
{
	CString TempStr[26]={"Reset","Request0","RequestAll","AntiColl","Select","Authen",
		"Inc","Dec","Restore","TransTo","Write","Read","Halt1","Halt2","TestMode","EraseAll","Write11",
		"Write55","WriteAA","WriteOTP","Active","LoadKey","SetKeyA","SetKeyB","SetSector","SetBlock"};
	unsigned short CmdVal[27]={0x10,0x26,0x52,0x9320,0x9370,0x60,0x0c1,0xc0,0xc2,0x0b0,0x0a0,0x30,0x50,0x51,0x40,0x41,0x42,0x44,0x45,0x46,0x43,0x15,0x11,0x12,0x13,0x14,0x47};
	int i=0;
	while(CmdString!=TempStr[i]){
		i++;
		if(i>=22)//no such command
			return 0;
	}
	return CmdVal[i];
}

unsigned char CmdTranslation(CString CmdStr,unsigned char *CmdPt)
{
	char TempStr[100];
	unsigned char CmdLen=2,ArgLen;	
	strcpy(TempStr,(LPCTSTR)CmdStr);
	if((CmdPt[0]=='/')&&(CmdPt[1]=='/'))
		return NULL;
	char seps[]   = " ";//
	char *token;
    token = strtok(TempStr, seps);
	CmdPt[0] = CmdConvert(token)&0x00ff;
	CmdPt[1] = (CmdConvert(token)&0xff00)>>8;//cmd high
	TRACE("Cmd: %x\n%x\n",CmdPt[0],CmdPt[1]);
	token = strtok(NULL,seps);
	TRACE("token=%s",token);
	if(token!=NULL)//command has arguements?
	{
    ArgLen = strlen(token);
    AsciiConvert(token,(CmdPt+2),ArgLen);
	CmdLen = ArgLen +2;
	}
    return CmdLen;//cmd length
}

void AsciiConvert(char *AsciiChar,unsigned char *RetBuffer, unsigned char DataCount)
{
	unsigned char i,temp1,temp2;
	TRACE("str:%s",AsciiChar);
	for(i=0;i<((DataCount)/2);i++)  
	{   //ascii code convertion	   
		if((*AsciiChar>='0')&&(*AsciiChar<='9'))
			temp1 = *AsciiChar-0x30;
		else if((*AsciiChar>='a')&&(*AsciiChar<='f'))
            temp1 = *AsciiChar-'a'+10;
		else
            temp1 = *AsciiChar-'A'+10;
		if(((*(AsciiChar+1)>='0')&&(*(AsciiChar+1)<='9')))
			temp2= *(AsciiChar+1)-0x30;
		else if((*(AsciiChar+1)>='a')&&(*(AsciiChar+1)<='f'))
            temp2= *(AsciiChar+1)-'a'+10;
		else
            temp2= *(AsciiChar+1)-'A'+10;
		RetBuffer[i]= (temp1<<4 ) | temp2;  		
		AsciiChar+=2;
	}
}
int CmdHandler(unsigned char *Cmd,unsigned char *Resp)
{
    int Result,i,temp;
	unsigned short CmdType;
	unsigned char CmdLen,CrcDat[2],RB1[4],Rb2[4],Rb3[4],TempBuffer[20],SendBuff[200];
	static unsigned char UserID[5],Key[5],RA[4]={0x0b0,0x2c,0x0aa,0x0c5},Sector,Block;
	for(i=0;i<10;i++)
		TRACE("CMD2=%x\n",Cmd[i]);
	CmdType = Cmd[0]|((Cmd[1]&0x00ff)<<8);
    switch(CmdType){
	case 0x10://reset
		SendBuff[0] = 0x10;
		SendBuff[1] = 0x00;     
		SendBuff[2] = 0x01;
		SendBuff[3] = 0x10;
		Result = protocol(CommPort,4, SendBuff,Resp);
		break;
	case 0x26://request
		SendBuff[0] = 0x26;
		SendBuff[1] = 0x00;     
		SendBuff[2] = 0x01;
		SendBuff[3] = 0x26;
		Result = protocol(CommPort,4, SendBuff,Resp);
		break;
	case 0x52://request all
        SendBuff[0] = 0x52;
		SendBuff[1] = 0x00;     
		SendBuff[2] = 0x01;
		SendBuff[3] = 0x52;
		Result = protocol(CommPort,4, SendBuff,Resp);
		break;
	case 0x40://test mode
       SendBuff[0] = 0x40;
		SendBuff[1] = 0x00;     
		SendBuff[2] = 0x01;
		SendBuff[3] = 0x40;
		Result = protocol(CommPort,4, SendBuff,Resp);
		break;
	case 0x41://write11
    	SendBuff[0] = 0x41;
		SendBuff[1] = 0x00;     
		SendBuff[2] = 0x01;
		SendBuff[3] = 0x41;
		Result = protocol(CommPort,4, SendBuff,Resp);
		break;
	case 0x44://write55
		SendBuff[0] = 0x44;
		SendBuff[1] = 0x00;     
		SendBuff[2] = 0x01;
		SendBuff[3] = 0x44;
		Result = protocol(CommPort,4, SendBuff,Resp);
		break;
	case 0x45://writeAA
        SendBuff[0] = 0x45;
		SendBuff[1] = 0x00;     
		SendBuff[2] = 0x01;
		SendBuff[3] = 0x45;
		Result = protocol(CommPort,4, SendBuff,Resp);
		break;
	case 0x42://write00
        SendBuff[0] = 0x42;
		SendBuff[1] = 0x00;     
		SendBuff[2] = 0x01;
		SendBuff[3] = 0x42;
		Result = protocol(CommPort,4, SendBuff,Resp);
		break;
	case 0x46://writeOTP
       SendBuff[0] = 0x46;
		SendBuff[1] = 0x00;     
		SendBuff[2] = 0x01;
		SendBuff[3] = 0x46;
		Result = protocol(CommPort,4, SendBuff,Resp);
		break;
	case 0x43://write00
        SendBuff[0] = 0x43;
		SendBuff[1] = 0x00;     
		SendBuff[2] = 0x01;
		SendBuff[3] = 0x43;
		Result = protocol(CommPort,4, SendBuff,Resp);
		break;
	case 0x13://set sector
        Sector = Cmd[2];
		break;
	case 0x14://set block
		Block = Cmd[2];
		break;
	case 0x15://loadkey
		for(i=0;i<7;i++)
			Key[i] = Cmd[i+3];
		break;
	case 0x9320:
		SendBuff[0] = 0x93;
		SendBuff[1] = 0x20;
		SendBuff[2] = 0x04;
        SendBuff[3] = 0x93;
		SendBuff[4] = parabity(0x93);
		SendBuff[5] = 0x20;
    	SendBuff[6] = parabity(0x20);
     	Result = protocol(CommPort,7, SendBuff,Resp);
        for(i=0;i<Resp[2];i++)
			UserID[i] = Resp[i+3];
		break;
	case 0x9370://select
        SendBuff[0] = 0x93;
		SendBuff[1] = 0x70;
		SendBuff[2] = 0x12;
        TempBuffer[0] = SendBuff[0];
        TempBuffer[1] = SendBuff[1];
		for(i=0;i<5;i++)
			TempBuffer[i+2] = UserID[i];
		CrcCreate(0x93,0,CrcDat);
        for(i=1;i<7;i++)
			CrcCreate(TempBuffer[i],1,CrcDat);
		TempBuffer[7] = CrcDat[1];
		TempBuffer[8] = CrcDat[0];
        for(i=0;i<9;i++){
				SendBuff[2*i+3] = TempBuffer[i];
				SendBuff[2*i+4] = parabity(TempBuffer[i]);
		}
     	Result = protocol(CommPort,21, SendBuff,Resp);
        break;
	case 0x60:
        SendBuff[2] = 0x04; 
        SendBuff[3] = 0x60;
		SendBuff[4] = Block & (Sector<<2);//sector and block number
        CrcCreate(0x60,0,CrcDat);
		CrcCreate(SendBuff[4],1,CrcDat);
		SendBuff[5] = CrcDat[1];
		SendBuff[6] = CrcDat[0];
        CmdLen = 3 + SendBuff[2];
     	Result = protocol(CommPort,CmdLen, SendBuff,Resp);//first stage
		for(i=0;i<=3;i++)
			RB1[i] = Resp[3+i];//receive RB
		for(i=0;i<=5;i++)
			crypt(Key[i],0,8);//keyA shift into crypt machine
    	for(i=0;i<4;i++)
			crypt((RB1[i]^UserID[i]),1,8);//shift RB^UID
		random16(RB1[2],RB1[3],8,0);//initiate ramdom generator
	    random16(0,0,8,1);
		random16(0,0,8,1);
        random16(0,0,8,1);
		random16(0,0,8,1);
        SendBuff[2] = 0x09; 
        SendBuff[3] = 0x62;//defined by jelphi
		for(i=0;i<=3;i++)
		{   
			int temp;
			temp = outputcryptbyte(RA[i],8,1);
			SendBuff[4+2*i] = temp>>8;
            SendBuff[4+2*i+1] = temp & 0x00ff;
		}
		CmdLen = 3 + SendBuff[2];
        Result = protocol(CommPort,CmdLen, SendBuff,Resp);//output RA
        SendBuff[2] = 0x0b; 
        SendBuff[3] = 0x63;//defined by jelphi
        for(i=0;i<=3;i++)
		{  
			unsigned char Rb;
			int temp;
			Rb=random16(0,0,8,1);
			temp = outputcryptbyte(Rb,8,1);
			SendBuff[4+2*i] = temp>>8;
            SendBuff[4+2*i+1] = temp & 0x00ff;
		}
		CmdLen = 3 + SendBuff[2];
		Result = protocol(CommPort,CmdLen, SendBuff,Resp);//output RB'
		//need to decrypt
        for(i =0;i<=3;i++)
            Rb2[i] = outputcryptbyte(Resp[i+3],8,1)>>8;
        for(i = 0;i<=3;i++)
			Rb3[1] = random16(0,0,8,1);
		i=0;
		while(Rb2[i]==Rb3[i])//compare
			i++;
		if(i==4)
			Result = 0xff;//pass
		else
			Result = 0xfe;//not pass                   
        break;
	case 0xc1://increase
		SendBuff[2] = 0x09; 
        SendBuff[3] = 0x0c1;//not encrypt
        TempBuffer[0] = 0x0c1;
        TempBuffer[1] = Block & (Sector<<2);
		CrcCreate(0x0c1,0,CrcDat);
        CrcCreate(TempBuffer[1],1,CrcDat);
        TempBuffer[2] = CrcDat[1];
		TempBuffer[3] = CrcDat[0];
        for(i=0;i<=3;i++){
			temp = outputcryptbyte(TempBuffer[i],8,1);
			SendBuff[4+2*i] = temp>>8;
            SendBuff[4+2*i+1] = temp & 0x00ff;
		}
		CmdLen = 3 + SendBuff[2];
		Result = protocol(CommPort,CmdLen, SendBuff,Resp);
		if(Resp[3] == 0x05)//permit adding
		{
			for(i=0;i<=3;i++)
				TempBuffer[i] = Cmd[i+2];
            CrcCreate(TempBuffer[0],0,CrcDat);
            CrcCreate(TempBuffer[1],1,CrcDat);
			CrcCreate(TempBuffer[2],1,CrcDat);
            CrcCreate(TempBuffer[3],1,CrcDat);
			TempBuffer[4] = CrcDat[1];
			TempBuffer[5] = CrcDat[0];
			for(i=0;i<=5;i++){
				temp = outputcryptbyte(TempBuffer[i],8,1);
			    SendBuff[4+2*i] = temp>>8;
                SendBuff[4+2*i+1] = temp & 0x00ff;
			}
            CmdLen = 3 + SendBuff[2];
	    	Result = protocol(CommPort,CmdLen, SendBuff,Resp);
			
		}
		break;
    case 0xc0://decrease
	
		SendBuff[2] = 0x09; 
        SendBuff[3] = 0x0c0;//not encrypt
        TempBuffer[0] = 0x0c0;
        TempBuffer[1] = Block & (Sector<<2);
		CrcCreate(0x0c0,0,CrcDat);
        CrcCreate(TempBuffer[1],1,CrcDat);
        TempBuffer[2] = CrcDat[1];
		TempBuffer[3] = CrcDat[0];
        for(i=0;i<=3;i++){
			temp = outputcryptbyte(TempBuffer[i],8,1);
			SendBuff[4+2*i] = temp>>8;
            SendBuff[4+2*i+1] = temp & 0x00ff;
		}
		CmdLen = 3 + SendBuff[2];
		Result = protocol(CommPort,CmdLen, SendBuff,Resp);
		if(Resp[3] == 0x05)//permit dec
		{
			for(i=0;i<=3;i++)
				TempBuffer[i] = Cmd[i+1];
            CrcCreate(TempBuffer[0],0,CrcDat);
            CrcCreate(TempBuffer[1],1,CrcDat);
			CrcCreate(TempBuffer[2],1,CrcDat);
            CrcCreate(TempBuffer[3],1,CrcDat);
			TempBuffer[4] = CrcDat[1];
			TempBuffer[5] = CrcDat[0];
			for(i=0;i<=5;i++){
				temp = outputcryptbyte(TempBuffer[i],8,1);
			    SendBuff[4+2*i] = temp>>8;
                SendBuff[4+2*i+1] = temp & 0x00ff;
            }
			CmdLen = 3 + SendBuff[2];
	    	Result = protocol(CommPort,CmdLen, SendBuff,Resp);
		
		}
		break;
			
    case 0xc2://Restore
	
		SendBuff[2] = 0x09; 
        SendBuff[3] = 0x0c2;//not encrypt
        TempBuffer[0] = 0x0c2;
        TempBuffer[1] = Block & (Sector<<2);
		CrcCreate(0x0c2,0,CrcDat);
        CrcCreate(TempBuffer[1],1,CrcDat);
        TempBuffer[2] = CrcDat[1];
		TempBuffer[3] = CrcDat[0];
        for(i=0;i<=3;i++){
			temp = outputcryptbyte(TempBuffer[i],8,1);
			SendBuff[4+2*i] = temp>>8;
            SendBuff[4+2*i+1] = temp & 0x00ff;
		}
		CmdLen = 3 + SendBuff[2];
		Result = protocol(CommPort,CmdLen, SendBuff,Resp);
		if(Resp[3] == 0x05)//permit dec
		{
			for(i=0;i<=3;i++)
				TempBuffer[i] = Cmd[i+2];
            CrcCreate(TempBuffer[0],0,CrcDat);
            CrcCreate(TempBuffer[1],1,CrcDat);
			CrcCreate(TempBuffer[2],1,CrcDat);
            CrcCreate(TempBuffer[3],1,CrcDat);
			TempBuffer[4] = CrcDat[1];
			TempBuffer[5] = CrcDat[0];
			for(i=0;i<=5;i++){
				temp = outputcryptbyte(TempBuffer[i],8,1);
			    SendBuff[4+2*i] = temp>>8;
                SendBuff[4+2*i+1] = temp & 0x00ff;
            }
			CmdLen = 3 + SendBuff[2];
	    	Result = protocol(CommPort,CmdLen, SendBuff,Resp);
		
		}
		break;
	case 0x0a0://Restore
	
		SendBuff[2] = 0x09; 
        SendBuff[3] = 0x0a0;//not encrypt
        TempBuffer[0] = 0x0a0;
        TempBuffer[1] = Block & (Sector<<2);
		CrcCreate(0x0a0,0,CrcDat);
        CrcCreate(TempBuffer[1],1,CrcDat);
        TempBuffer[2] = CrcDat[1];
		TempBuffer[3] = CrcDat[0];
        for(i=0;i<=3;i++){
			temp = outputcryptbyte(TempBuffer[i],8,1);
			SendBuff[4+2*i] = temp>>8;
            SendBuff[4+2*i+1] = temp & 0x00ff;
		}
		CmdLen = 3 + SendBuff[2];
		Result = protocol(CommPort,CmdLen, SendBuff,Resp);
		if(Resp[3] == 0x05)//permit dec
		{
			for(i=0;i<=15;i++)
				TempBuffer[i] = Cmd[i+2];
            CrcCreate(TempBuffer[0],0,CrcDat);
            CrcCreate(TempBuffer[1],1,CrcDat);
			CrcCreate(TempBuffer[2],1,CrcDat);
            CrcCreate(TempBuffer[3],1,CrcDat);
			TempBuffer[16] = CrcDat[1];
			TempBuffer[17] = CrcDat[0];
			for(i=0;i<=35;i++){
				temp = outputcryptbyte(TempBuffer[i],8,1);
			    SendBuff[4+2*i] = temp>>8;
                SendBuff[4+2*i+1] = temp & 0x00ff;
            }
			SendBuff[2] = 37;
			SendBuff[3] = 0x0a0;
			CmdLen = 3 + SendBuff[2];
	    	Result = protocol(CommPort,CmdLen, SendBuff,Resp);
		
		}
		break;	
    case 0x30://Restore
	
		SendBuff[2] = 0x05; 
        SendBuff[3] = 0x30;//not encrypt
        TempBuffer[0] = 0x30;
        TempBuffer[1] = Block & (Sector<<2);
		CrcCreate(0x30,0,CrcDat);
        CrcCreate(TempBuffer[1],1,CrcDat);
        TempBuffer[2] = CrcDat[1];
		TempBuffer[3] = CrcDat[0];
        for(i=0;i<=3;i++){
			temp = outputcryptbyte(TempBuffer[i],8,1);
			SendBuff[4+2*i] = temp>>8;
            SendBuff[4+2*i+1] = temp & 0x00ff;
		}
		CmdLen = 3 + SendBuff[2];
		Result = protocol(CommPort,CmdLen, SendBuff,Resp);
	case 0x50://halt(no encrypt)
        SendBuff[2] = 0x05; 
        SendBuff[3] = 0x50;
        SendBuff[4] = 0x50;
		SendBuff[5] = Block & (Sector<<2);//sector and block number
        CrcCreate(0x50,0,CrcDat);
		CrcCreate(SendBuff[5],1,CrcDat);
		SendBuff[6] = CrcDat[1];
		SendBuff[7] = CrcDat[0];
        CmdLen = 3 + SendBuff[2];
     	Result = protocol(CommPort,CmdLen, SendBuff,Resp);//first stage
		break;
	case 0x51://halt (encrypted)
        SendBuff[2] = 0x09; 
        SendBuff[3] = 0x51;
		TempBuffer[0] = 0x50;
        TempBuffer[1] = Block & (Sector<<2);
		CrcCreate(0x50,0,CrcDat);
        CrcCreate(TempBuffer[1],1,CrcDat);
        TempBuffer[2] = CrcDat[1];
		TempBuffer[3] = CrcDat[0];
        for(i=0;i<=3;i++){
			temp = outputcryptbyte(TempBuffer[i],8,1);
			SendBuff[4+2*i] = temp>>8;
            SendBuff[4+2*i+1] = temp & 0x00ff;
		}
		CmdLen = 3 + SendBuff[2];
		Result = protocol(CommPort,CmdLen, SendBuff,Resp);
	case 0x0b0://trasnfer 
        SendBuff[2] = 0x09; 
        SendBuff[3] = 0xb0;//not encrypt
        TempBuffer[0] = 0xb0;
        TempBuffer[1] = Block & (Sector<<2);
		CrcCreate(0xb0,0,CrcDat);
        CrcCreate(TempBuffer[1],1,CrcDat);
        TempBuffer[2] = CrcDat[1];
		TempBuffer[3] = CrcDat[0];
        for(i=0;i<=3;i++){
			temp = outputcryptbyte(TempBuffer[i],8,1);
			SendBuff[4+2*i] = temp>>8;
            SendBuff[4+2*i+1] = temp & 0x00ff;
		}
		CmdLen = 3 + SendBuff[2];
		Result = protocol(CommPort,CmdLen, SendBuff,Resp);

	default:
		break;
	}   
    return 0;
}

unsigned char b1(unsigned char a, unsigned char b, unsigned char c, unsigned char d);
unsigned char b2(unsigned char a, unsigned char b, unsigned char c, unsigned char d);
unsigned char b3(unsigned char a, unsigned char b, unsigned char c, unsigned char d, unsigned char e);


unsigned char crypt(unsigned char inbyte, int status, int shiftnumber)
{
  // status = 0 , the inbyte is the valid data and the switch_A is open 
  // status = 1 , the inbyte is the valid data and the switch_A is close
  // status = 2 , the inbyte is not valid data to shift in the 48lfsr and switch_A is close
  // the shiftnumber is shift number
  static unsigned char x[48];
  int i,j; 
   
  unsigned char fd[16];
  unsigned char fd0;
  unsigned char net146, net141, net52, net57, net61, keyout;
  unsigned char temp;
 
  for (i=0; i<shiftnumber; i++)
   {
       fd[0]= (x[47] != x[42]);
       fd[1]= (fd[0] != x[38]);
       fd[2]= (fd[1] != x[37]);
       fd[3]= (fd[2] != x[35]);
       fd[4]= (fd[3] != x[33]);
       fd[5]= (fd[4] != x[32]);
       fd[6]= (fd[5] != x[30]);
       fd[7]= (fd[6] != x[28]);	
       fd[8]= (fd[7] != x[23]);	
       fd[9]= (fd[8] != x[22]);	
       fd[10]=(fd[9] != x[20]);	
       fd[11]=(fd[10]!= x[18]);	
       fd[12]=(fd[11]!= x[12]);	
       fd[13]=(fd[12]!= x[8]);	
       fd[14]=(fd[13]!= x[6]);	
       fd[15]=(fd[14]!= x[5]);	
       fd[16]=(fd[15]!= x[4]);	
 
      temp = inbyte << (7-i);
      temp = temp >> 7;
       
       if (status == 0)       
        fd0 = temp;
       else if (status == 1)
        fd0 = (fd[16] != temp);
       else
        fd0 = fd[16];
        
      for(j=47; j>0; j--)
      {
         x[j] = x[j-1];
      } 
       
     x[0] = fd0;
   }

	net146=b2( x[38], x[36], x[34], x[32]);
	net141=b1(x[30], x[28], x[26], x[24]);
	net52 =b1(x[22], x[20], x[18], x[16]);
	net57= b2( x[14], x[12], x[10], x[8]);
	net61= b1(x[6], x[4], x[2], x[0]);
	
	keyout = b3( net146, net141, net52, net57, net61);
 
	
	return keyout;
}
unsigned char b1(unsigned char a, unsigned char b, unsigned char c, unsigned char d)
{
	unsigned char net11, net13, net9;
	unsigned char net28, net24, net32, net22;
	unsigned char net16, net19;
	net13 = !a;
	net11 = !b;
	net9  = !c;
	
	
	net28 = !(net11 && net13 && c);
	net24 = !(b && net9 && d);
	net32 = !(net9 && a && d);
	net22 = !(a && b);
	
	net16 = !(net28 && net24);
	net19 = !(net32 && net22);
	
	return !(net16 || net19);
	
}
unsigned char b2(unsigned char a, unsigned char b, unsigned char c, unsigned char d)
{
	unsigned char net18, net16, net14, net12;
	unsigned char net28, net24, net32, net36, net40;
	unsigned char net45, net20;
	net18 = !a;
	net16 = !b;
	net14 = !c;
	net12 = !d;
	
	net28 = !(net16 && d && c);
	net24 = !(a && b && c);
	net32 = !(a && c && d);
	net36 = !(b && net14 && net18);
	net40 = !(a && net12 && net14);
	
	net45 = !(net28 && net24);
	net20 = !(net32 && net36 && net40);
	
	return !(net45 || net20);
	
}
unsigned char b3(unsigned char a, unsigned char b, unsigned char c, unsigned char d, unsigned char e)
{
	unsigned char net12, net18,net16,net10, net14;
	unsigned char net24, net33, net37, net41, net45, net49;
	unsigned char net25, net29;
	net12 = !a;
	net18 = !b;
	net16 = !c;
	net10 = !d;	
	net14 = !e;
	
	net24 = !(net12 && net14 && net18 && d);
	net33 = !(net12 && net16 && d);
	net37 = !(net10 && c && b);
	
	net41 = !(a && d && e);
	net45 = !(a && e && c);
	net49 = !(a && b && net10);
	
	net29 = !(net41 && net45 && net49);
	net25 = !(net24 && net33 && net37);
	
	return !(net25 || net29);
}


unsigned char random16(unsigned char initlow, unsigned char inithigh,int bitnumber, int status)
{
// status = 0, initial the random shifter
// status = 1, generate bitnumber random bit.
   unsigned char rangen1, rangen2,rangen3,temp;
   static unsigned char x[16];
   int i,j;
   unsigned short IniVal;
   unsigned char outbyte;
   bool r[15];
   
   IniVal = ((inithigh&0x00ff)<<8) & initlow;

   outbyte = 0;   
   if (status == 0)
   {
   	for(i=0;i<=15;i++)
		r[i] = ((IniVal>>i) & 0x01)?true:false;
	x[0] = r[1]^r[2]^r[4]^r[15];
	x[1] = r[0]^r[1]^r[3]^r[14];
    x[2] = r[0]^r[1]^r[13]^r[14]^r[15];
	x[3] = r[0]^r[1]^r[3]^r[14];
    x[4] = r[0]^r[3]^r[4]^r[11]^r[13]^r[14]^r[15];
	x[5] = r[1]^r[3]^r[4]^r[10]^r[12]^r[13]^r[14]^r[15];
    x[6] = r[0]^r[2]^r[3]^r[9]^r[11]^r[12]^r[13]^r[14];
	x[8] = r[3]^r[7]^r[9]^r[11]^r[12]^r[14];
    x[9] = r[2]^r[6]^r[8]^r[9]^r[10]^r[11]^r[13];
    x[10] = r[1]^r[5]^r[7]^r[8]^r[9]^r[10]^r[12];
    x[11] = r[0]^r[4]^r[6]^r[7]^r[8]^r[9]^r[11];
    x[12] = r[1]^r[2]^r[3]^r[4]^r[5]^r[6]^r[7]^r[8]^r[10]^r[15];
	x[13] = r[0]^r[1]^r[2]^r[3]^r[4]^r[5]^r[6]^r[7]^r[9]^r[14];
    x[14] = r[0]^r[3]^r[5]^r[6]^r[8]^r[13]^r[15];
	x[15] = r[0];

   }
   else {
   	  for (j=0; j<bitnumber; j++)
   	  {
                  temp = x[15];
                  temp = temp << 7;
                  outbyte = outbyte >> 1  ;
                  outbyte = outbyte + temp;
	   	 
                  rangen1 = (x[14] != x[12]);
	   	  rangen2 = (rangen1 != x[11]);
	   	  rangen3 = (rangen2 != x[9]);
	   	  
	   	  for (i=14; i>0; i--)
	   	   x[i]= x[i-1];
	   	  x[0] = x[15];
	   	  x[15] = rangen3;
   	  }
   	}
   return outbyte;
}

unsigned char XOR(unsigned char RB, unsigned char UID)
{
  int i; 
  unsigned char temp1, temp2, temp;
 temp = 0;

 for (i=0; i<8; i++)
 {
   temp = temp << 1;
   temp1 = RB << i;
   temp1 = temp1 >> 7;
   temp2 = UID << i;
   temp2 = temp2 >> 7;
   temp = temp + (temp1 != temp2);
   
 }
 printf("the uid^RB is %2x \n", temp);
 return temp;
}

int CrcCreate(unsigned char outbyte, int status, unsigned char *crcdata)
{
  // status = 0 , this byte is the first byte;
  // status = 1, this byte is the continus byte;
 // crcdata[1] store the first byte crc result, and should transfer
 // the least sign bit first. then the crcdata[0].
  unsigned char inidata,temp;
  static unsigned char r[16];
  int i,j;
  unsigned char xr0,xr5,xr12; 
 if(status == 0)
 {
  inidata = 0x63;
  for (i=0; i<8;i++)
   {
     temp = inidata << (7-i);
     temp = temp >> 7;
     r[i] = temp;
     r[i+8]= temp;
   }
   
  }  
  // initial the 16 bit shifter register.
 for (i=0; i<8; i++)
 {
    temp = outbyte << (7-i);
    temp = temp >> 7;
       // temp is the input bit.
    xr0 = (r[0] + temp ) % 2;
    xr5 = (r[11] + xr0 ) % 2;
    xr12 = (r[4] + xr0 ) % 2;

    for(j=0; j<15;j++)
     r[j] = r[j+1];

    r[15] = xr0;
    r[10] = xr5;
    r[3]  = xr12; 
 }
 for(i=7; i>=0; i--)
  {
    crcdata[1] = crcdata[1] << 1;
    crcdata[1]= crcdata[1] + r[i];
    crcdata[0] = crcdata[0] << 1;
    crcdata[0]= crcdata[0] + r[8+i];
  }
 return 0;
}
unsigned short outputcryptbyte(unsigned char InDat, int bitnumber,int cryptstatus)
{
// cryptstatus = 0 for RA
// cryptstatus = 1 for other

  int i,EncryptDat;
  unsigned char curbit;
  static unsigned char lastbit;
  unsigned char paritybit, cryptbit;
  paritybit = 1;

  cryptbit = crypt(0, 0, 0);

  for (i=0; i<bitnumber; i++)
  {
    cryptbit = crypt(0, 0, 0);
    curbit = InDat <<(7- i);
    curbit = curbit >> 7;
    paritybit = (paritybit+curbit) % 2;
    if(cryptstatus == 1)
        crypt(curbit, 1, 1);
    else 
		crypt(curbit, 2, 1);
    curbit = (curbit != cryptbit);
	if(curbit==0x01)
		EncryptDat|= 0x01;
	else
        EncryptDat &= 0x0fe;
    EncryptDat<<= 1;
  }
  if ((bitnumber == 8))//parity bit crypt
  {
    cryptbit = crypt(0, 0, 0);
    curbit = paritybit;
    curbit = (curbit != cryptbit);
	if(curbit == 0x01)
		EncryptDat = (EncryptDat<<8)&0x01;
	else
		EncryptDat = EncryptDat<<8;
  }
  return EncryptDat;
}
unsigned char parabity(unsigned char dat)
{
   unsigned char Bit_1_num,i;
   for(i= 0;i<8;i++)
   {
     if(dat%2)
		 Bit_1_num++;
	 dat=dat>>1;
   }
   if(Bit_1_num%2)
	     return 0x00;
	 else
		 return 0x01;

 
}